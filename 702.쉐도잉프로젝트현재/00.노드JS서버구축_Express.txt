[ Node JS 를 활용한 개발환경 서버구축 : Express ]

Express란 무엇인가?

[ Express ]
Express는 웹 및 모바일 애플리케이션을 위한 일련의 강력한 기능을 
제공하는 간결하고 유연한 Node.js 웹 애플리케이션 프레임워크이다. 
Node.js는 표준 웹서버 프레임워크로 불려질 만큼 많은 곳에서 사용하고 있다. 
 

[ Node.js와 Express는 무슨 관계인가? ] 

Node.js는 Chrome의 V8엔진을 이용하여 JavaScript로 브라우저가 아니라
 서버를 구축하고, 서버에서 JavaScript가 작동되도록 해주는 런타임 환경
 (플랫폼)이다. Express는 이런 Node.js의 원칙과 방법을 이용하여 웹
  애플리케이션을 만들기 위한 프레임워크다. 
 

간단하게 말하자면, 
Express란 Node.js를 사용하여 쉽게 서버를 구성할 수 있게 만든 
클래스와 라이브러리의 집합체임!!! 

 

[ 왜 Express 인가? ]

Express는 프레임워크이므로 웹 애플리케이션을 만들기 위한 각종 
라이브러리와 미들웨어 등이 내장되어 있어 개발하기 편하고, 수많은 
개발자들에게 개발 규칙을 강제하여 코드 및 구조의 통일성을 향상할 수 있다.

그것이 바로 프레임워크 도입의 가장 큰 장점이자 주된 사용이유이다. 

Express는 가장 많은 곳에서 보편적으로 사용되기 때문에 Express를 도입하면
구글링을 통해 충분한 래퍼런스들을 검색할 수 있다.

다른 프레임워크도 사용할 수 있는데 
Adonis.js, Koa, Sails.js와 같은 프레임워크가 있다.
(우리 보조교재(리액트를 다루는기술)에서 Koa프레임워크를 소개하고 있다!)
 
하지만 Express는 가장 유명하고 가장 널리 사용되기 때문에 
Express를 배워두는 것이 프레임워크를 배우는 데 있어서 가장 좋은 방법이다!


[ Express 설치 방법 ] 

터미널에서 내가 설치할 경로를 잡아두고 다음과 같이 입력 

npm install --save express

-> 간단히 : npm i express
(당연하지만 삭제는 uninstall 명령어를씀!-> npm uni express)
 

((참고))
설치옵션 명령어에 --save dev가 아니라 --save인 이유는 
프로덕션 의존성 때문이다.  

dev를 붙이지 않음으로 개발 중에만 사용하는 툴 뿐만 아니라 우리가 전달할 
애플리케이션의 한 부분으로 통합될 것이며, 따라서 이것도 반드시 애플리케이션을 
배포한 뒤 실행하게 될 모든 서버와 컴퓨터에 설치되어야 한다는 의미이다.

설치가 완료되면 package.json 파일에 의존성으로 추가된 것을 확인할 수 있다.

 

설치후 Express를 사용할 수 있으며, 
가장 간단하게 사용할 때는 다음과 같이 사용할 수 있다. 

 
*************************************
const http = require('http'); 
// require 파일을 불러오는 방법 
const express = require('express');
const app = express();

const server = http.createServer(app); 
// 서버를 생성할 때 꼭 필요한 메서드 

server.listen(3000);
// 연결포트지정
*************************************