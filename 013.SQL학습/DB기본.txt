[ 데이터베이스 기본 ]
1. DB란?
- 공유하고자 하는 데이터를 서버의 
어플리케이션에서 관리하는 데이터 저장소

2. DB 서버 어플리케이션 종류:
MySQL, SQL Server, MS Access, Oracle, Sybase, Informix, Postgres 

2. DB를 사용하는 목적
1) 공유
2) 데이터 최신상태유지
3) 데이터 이력

3. DB 테이블
- 데이터를 종류와 목적별로 구분하여 나누어놓은
데이터 그룹

4. 중복데이터문제!!!
- 독립된 데이터 테이블을 만들다보면 중복데이터로
많은 자원이 낭비가되고 데이터베이스 관리가 
복잡해진다! 이것을 해결하기 위해 나온것이!!!

====> RDBMS(관계형데이터베이스)
      - 데이터를 분류별로 테이블로 만들고
	유일키를 부여하여 다른 테이블에서
	이것만 참조하도록하여 중복데이터 문제를
	해결한다!!!

5. DB 서버에서 사용하는 언어는 SQL
	(Structured Query Language)
	- 구조화된 질의 언어
	-> "시퀄" 이라고 읽어주면 좋다!
	-> DB 쿼리문은 대소문자를 구분하지 않는다!
	(단, MySQL 어드민에서 코딩할때 자동완성에서는
	예약어를 대문자로 표기해 주는 데 이것은 
	구분해서 보라고 하는 것일 뿐이다!)
	
[ DB만들기 ]
1. 새로운... 버튼 클릭 또는 "데이터베이스"탭 클릭
2. DB명을 쓰고 데이터정렬방식을 "utf8_general_ci" 선택한다
 -> 이것을 선택하는 이유는 가장 보편적인 포멧이기때문
	(즉, 2byte문자 처리 등이 용이함!)
3. 만들기.... 버튼 클릭!
4. SQL로 DB만들때:

CREATE DATABASE `디비명` 
DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;

[ DB 문자셋 변경하기 ]

ALTER DATABASE `디비명` 
DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;


[ SQL 은 크게 2가지분류! ]

1. DDL(데이터 정의언어) : 데이터 저장 구조 묘사
 -> CREATE TABLE, CREATE DATABASE...

2. DML(데이터 조작언어) : 저장된 데이터 가공
 -> INSERT, UPDATE, DELETE, SELECT...


[ 가장 중요한 SQL 명령 중 일부 ]

-> DML
SELECT- 데이터베이스에서 데이터 추출
UPDATE- 데이터베이스의 데이터를 업데이트합니다.
DELETE- 데이터베이스에서 데이터를 삭제합니다.
INSERT INTO- 데이터베이스에 새 데이터를 삽입합니다.

-> DDL
CREATE DATABASE- 새 데이터베이스 생성
ALTER DATABASE- 데이터베이스 수정
CREATE TABLE- 새 테이블 생성
ALTER TABLE- 테이블 수정
DROP TABLE-테이블 삭제
CREATE INDEX-색인 생성 (검색 키)
DROP INDEX- 인덱스 삭제


[ DB SQL사용하기 ]
1. 실행을 Root(127.0.0.1)에서 SQL실행을 해야한다!


[ DB 테이블 만들기 ]

1. 테이블을 만들 DB를 선택한다!
2. 테이블 쿼리를 구성한다.

CREATE TABLE 테이블명(
    컬럼명 데이타형 [널여부 자동증가],
    컬럼명 데이타형,
    컬럼명 데이타형,
   [primary key (컬럼명)]
);

-> 각 컬럼명은 데이터가 종류별로 저장되는 공간이다
-> 각 컬럼은 데이터형이 정해져 있다!
-> 옵션: 널여부 -> 안쓰면 null값 허용, 
		not null 이라고 쓰면 필수항목
-> 옵션: 자동증가 -> auto_increment 이것을 쓰면 자동숫자증가됨
	이것을 사용할 경우 int형을 쓰고 not null로 필수항목으로
	만들어야 한다!

-> 만약 DB 데이터의 레코드가 각각 유일한 데이터로 만들려면
기본키(primary key)를 설정해야하며 보통은 자동증가 컬럼을
기본키로 설정한다!

예시문)

CREATE TABLE `friends`(
   fnum int NOT null AUTO_INCREMENT,
    fname varchar(20),
    ftel char(11),
    faddr varchar(200),
    fmsg text(1000),
    fdate timestamp,
    PRIMARY KEY (fnum)
);

-> 백틱(`)을 사용해도 동일하다!
-> 다만 백틱을 사용하는 목적은 키워드와 같은 이름 등
해석상 에러가 발생할 수 있는 소지를 미리 막는데 있다!

CREATE TABLE `friends`( 
    `fnum` int NOT null AUTO_INCREMENT, 
    `fname` varchar(20), 
    `ftel` char(11), 
    `faddr` varchar(200), 
    `fmsg` text(1000), 
    `fdate` timestamp, 
    PRIMARY KEY (`fnum`) 
);

추가예시)
CREATE TABLE `saveMoney`(
	`idx` int NOT null AUTO_INCREMENT,
    `name` varchar(50) NOT null,
    `address` varchar(200),
    `gender` char(1) NOT null,
    `birth` date,
    `time` timestamp,
    PRIMARY KEY (`idx`)
);



[ 데이터형 ]
1. 숫자형 : int -> 범위(-21억~21억)
    - 만약 컬럼생성시 int라고만 쓰면 
    기본 자릿수가 11자리로 잡혀서 int(11)로 표기된다.
    이는 10자리면 21억개의 숫자 자리수이지만 
    맨앞에 한자리 0을 넣어주는 것을 기본으로 설계되어서
    11자리로 표기되는 것이다
    만약 자릿수를 제한하려면 생성시에
    int(자릿수)로 만들면 된다!
    예) int(6) -> 10만자리수 까지
    
    - 만약 마이너스 범위(-21억)을 사용하지 않고
    양수만 쓰고 싶다면 반대범위가 낭비 되므로
    키워드 unsigned 를 사용하여 양수만 사용하여
    두배수를 사용할 수 있다~! (21억*2=42억)
    
    
2. 문자형 :
	1) char(byte개수) -> 정한 크기만큼 공간차지
	- char 는 character (문자)에서 나온말
	2) varchar(byte개수) -> 정한 크기보다 적은경우 작아짐
	-> 공간 절약을 위한 데이터형이어서 많이쓰임!
	- varchar 는 variable character (변하는 문자) 에서 나온말
	3) text(byte개수)
	-> 65,535까지 사용가능
	-> 예컨데 text(4000) 영문자같은 경우 4000글자지만
	한글 같은 경우 2byte이므로 2000글자만 들어간다~!
3. 날짜형: 
	1) date -> 날짜형식은 YYYY-MM-DD(년-월-일)
		-> 한계는 "1000-01-01" ~ "9999-12-31"
	2) datetime -> 날짜형식은 YYYY-MM-DD hh:mm:ss
				(년-월-일 시:분:초)
	3) timestamp -> 자동으로 기록되는 날짜시간 형식
		-> 입력이 별도로 필요없다!
		-> 날짜형식은 datatime과 동일함!
        
4. 키워드:
    1) not null -> 데이터 빈값 불허용
    (이 키워드를 안쓰면 널값 허용)
    -> 널값? 데이터 레코드 입력시 컬럼을 비워놓는것
    2) AUTO_INCREMENT -> 자동증가(숫자1씩증가)
    3) unsigned -> 숫자의 음수값 사용안하고
                양수로 숫자값 사용함
    4) default -> 데이터 입력안할 경우 기본값 넣기
        - 실제로 사용시 -> default 기본값
    5) primary key -> 기본키(유일키포함)
        -> 사용법: 컬럼 정의시 뒤쪽에 쓰거나
        맨 아래에서 본 키워드 뒤에 소괄호 안에 키지정
        예) `idx` int primary key
            또는
            primary key (`idx`,`email`)
        -> 기본키는 여러개를 묶어서 그룹지정가능함



[ 테이블 지우기 ]
-> drop table `테이블명`

- 지울때 mysql 어드민 sql모드에서 백틱을 쓰면 
테이블명 자동완성 지원!

[ 테이블 컬럼 추가하기 ]

ALTER TABLE `테이블명`
ADD `컬럼명` 데이터형;

예시)
ALTER TABLE `friends`
ADD `age` int;

[ 테이블 컬럼 지우기 ]

ALTER TABLE `테이블명`
DROP COLUMN `컬럼명`;

예시)
ALTER TABLE `friends`
DROP COLUMN `age`;


[ 테이블 컬럼 수정하기(데이터형) ]

ALTER TABLE `테이블명`
MODIFY COLUMN `컬럼명` 데이터형;

예시)
ALTER TABLE `friends`
MODIFY COLUMN `fname` varchar(100);



[ 테이블 컬럼 순서바꾸기 ]
ALTER TABLE 테이블명 MODIFY 바꿀컬럼명 바꿀컬럼형 AFTER 뒤에놓을컬럼
ALTER TABLE `todolist` MODIFY `title` varchar(300) AFTER `cont`


>>>>>> DML (INSERT INTO, UPDATE, DELETE, SELECT)<<<<

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1. INSERT INTO : 데이터 넣기

INSERT INTO `테이블명` (컬럼명들) VALUES (값들);

예시)

INSERT INTO `friends` (`fname`,`ftel`,`faddr`,`fmsg`) 
VALUES ("이도","01011112222","서울시 종로구","세종대왕 만만세~!!!");

>>>>>>>>>>>>>>>>>>>>>>>>>
2. SELECT : 데이터 조회하기

SELECT * FROM `테이블명` 
-> 전체 데이터 조회,전체 컬럼조회

SELECT 컬럼명(들) FROM `테이블명` 
-> 전체 데이터 조회, 일부컬럼 조회 

SELECT * FROM `테이블명` WHERE 컬럼명 = 값
-> 데이터 중 조건에 맞는 데이터 조회

SELECT COUNT(*) FROM `테이블명`
-> 전체 레코드 개수 
-> 뒤에 조건문이 있다면 조건에 해당하는 레코드 개수

<<<< 검색에 사용되는 select >>>>>>>
-> LIKE 키워드! + "%"

예시1)
SELECT `name` AS "이름", `city` AS "사는곳" 
FROM `member_info` 
WHERE `name` LIKE "a%"
-> %를 뒤에 붙여 like검색하면 a로 시작하는 모든 것 검색

예시2)
SELECT `name` AS "이름", `city` AS "사는곳" 
FROM `member_info` 
WHERE `name` LIKE "%tt"
-> %를 앞에 붙여서 like검색하면 tt로 끝나는 모든 것 검색

예시3)
SELECT `name` AS "이름", `city` AS "사는곳" 
FROM `member_info` 
WHERE `name` LIKE "%net%"
-> %를 앞뒤에 붙여서 like검색하면 net가 들어간 모든 것 검색

예시4)
SELECT `name` AS "이름", `city` AS "사는곳" 
FROM `member_info` 
WHERE `name` LIKE "a_______%"
-> 언더바(_)를 사용할 개수만큼 글자수의 제한을 주어 
그것이상의 모든 것 검색(즉, a로 시작하고 8글자이상을 검색)

예시5)
SELECT `name` AS "이름", `city` AS "사는곳" 
FROM `member_info` 
WHERE `name` LIKE "a%v"
-> %를 중간에 사용하여 a로 시작하고 v로 끝나는 모든것 검색

참고) 선택시 컬럼명에 AS를 사용하고 뒤에 문자를 적으면
    선택결과 출력시 해당 이름으로 결과가 출력된다!
    

[ 조건은 WHERE ] -> DELETE (삭제)할때도 매우중요함!
- 단일조건 : WHERE 컬럼명 = 값
- 다중조건(곱) : WHERE 컬럼명 = 값 AND 컬럼명 = 값
- 다중조건(합) : WHERE 컬럼명 = 값 OR 컬럼명 = 값
- NOT조건 : WHERE NOT 컬럼명 = 값

-> 위의 여러 조건을 쓸 경우 예시
    SELECT * FROM `테이블명`
    WHERE 컬럼명 = 값 AND NOT 컬럼명 = 값 OR 컬럼명 = 값

>>>>>>>>>>>>>>>>>>>>>>>>
3. DELETE : 데이터 삭제

DELETE FROM `테이블명` WHERE 조건문

(참고사항: 기존의 데이터를 지울 경우 인텍스 번호는 지워진 
최종 번호 다음 번호부터 생성된다!-> 유일한 키를 지킴!)

예시)
DELETE FROM `friends` WHERE `fname` = "이도" AND NOT `fnum`= 4;
(해석: `friends`테이블로 부터 `fname`이 "이도" 이고 
`fnum`이 4가 아닌 레코드만 지워라!)


주의!!!) 
WHERE조건문이 없으면 모든 데이터의 같은 항목이 삭제된다!!!


>>>>>>>>>>>>>>>>>>>>>>>
4. UPDATE : 데이터 수정

UPDATE `테이블명` SET 컬럼명 = 값
WHERE 조건문

주의!!!) 
WHERE조건문이 없으면 모든 데이터의 같은 항목이 업데이트 된다!!!

예시) 
UPDATE `friends` SET `fname`="이도"
WHERE `fnum` = 4;
UPDATE `friends` SET `fname`="이산"
WHERE `fnum` = 5;
UPDATE `friends` SET `fname`="이혼"
WHERE `fnum` = 8;



<<<<<<<<< DML 정리 >>>>>>>>>>>>>
SELECT * FROM 테이블명
INSERT INTO 테이블명 (컬럼명) VALUES (값)
DELETE FROM 테이블명 WHERE 조건절
UPDATE 테이블명 SET 컬럼명=값 WHERE 조건절
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


>>>>>>> 관계형 데이터베이스 에서 사용하는 테이블 연관시키기 <<<<<
제약조건을 사용하여 표현!
1)기본키(Primary Key) - 유일한 레코드 구분키
2)외래키(Foreign Key) - 다른 참조 테이블의 기본키를 가져옴

[테이블 구성]
1. 회원테이블: member_info
-> 기본키 : `idx`,`mail`
2. 주문테이블 : order
    1) 주문순번 : odno - int 자동증가 (기본키)
    2) 회원번호 : idx - int (외래키-`member_info`.`idx`)
    3) 주문번호 : odcd - int NOT null unique
    4) 상품명 : gnm - varchar(100)
    5) 주문날짜 : ctime - timestamp

예시)
CREATE TABLE `order` (
    odno int not null AUTO_INCREMENT,
    idx int,
    odcd int NOT null UNIQUE,
    gnm varchar(100),
    ctime timestamp,
    PRIMARY KEY (`odno`),
    FOREIGN KEY (`idx`) REFERENCES `member_info`(`idx`)
);

->>>>> 외래키는 <<<<<<<
FOREIGN KEY (`컬럼명`) REFERENCES `참조테이블명`(`참조컬럼`)

->>>>> 유일키는 <<<<<<<
데이터 제약조건으로 UNIQUE 키워드를 사용한다!

>>> 데이터 넣기 <<<<<
예시)
INSERT INTO `order` (`idx`,`odcd`,`gnm`)
VALUES (873,12125899,"구두");
INSERT INTO `order` (`idx`,`odcd`,`gnm`)
VALUES (333,34565899,"시계");
INSERT INTO `order` (`idx`,`odcd`,`gnm`)
VALUES (474,45123366,"반지");
INSERT INTO `order` (`idx`,`odcd`,`gnm`)
VALUES (78,45456687,"스마트폰");
INSERT INTO `order` (`idx`,`odcd`,`gnm`)
VALUES (657,78785699,"드레스");



>>>>>>>> 조인(join) <<<<<<<<<<<<<<
-> 관계형 데이터 베이스에서 테이블 간 기본키와 외래키로 관계가
설정되어 있을때 이를 연결하여 선택할 수 있는 방법!

예시) 회원테이블(member_info)과 주문테이블(order)을 조인하여
새로운 선택을 하시오!
-> 기본개념: 기본키와 외래키로 연결된 컬럼으로 조인하여
양쪽 테이블에 사용되는 특정 컬럼을 가져온다!

예시코드)

SELECT 
`odcd` AS "주문번호", 
`gnm` AS "주문상품", 
`ctime` AS "주문일시", 
`member_info`.`name` AS "구매자",
`member_info`.`city` AS "사는곳",
`member_info`.`mail` AS "이메일"
FROM `order`
INNER JOIN `member_info`
ON `order`.`idx` = `member_info`.`idx`

->>>>>> 이너조인 사용코드 : <<<<<<<<<<<<<
INNER JOIN `조인할테이블명`
ON `현재테이블명`.`외래키컬럼명` = `조인할테이블명`.`기본키컬럼명`

참조))) 보통 테이블을 조인할 경우 양쪽컬럼중 어디 속하는지 명시할때
    -> 테이블명.컬럼명
    형식을 사용한다!



>>>>>>> 유니온(UNION) <<<<<<<<<<<<
- 어떤 테이블에 데이터가 너무 많아지면 같은 구조의 다른 테이블을
다시 새로 만들어서 사용하는 경우가 많다. 이는 DB쿼리 속도가 
느려지기 때문이다. 검색을 할 경우 이전데이터가 모두 필요한데
이때 유니온으로 두 테이블을 한꺼번에 묶어서 처리할 수 있다!

SELECT column_name(s) FROM table1
UNION
SELECT column_name(s) FROM table2;

※주의사항: 두 테이블의 스키마 구조가 똑같아야함!


>>>>> ORDER BY <<<<<<<<<
데이터 선택시 정렬 순서
1) ORDER BY 컬럼명 DESC - 내림차순
2) ORDER BY 컬럼명 ASC - 오름차순
3) 순차적 적용 정렬: 순서대로 첫번째, 두번째, 세번째 기준순
    ORDER BY 컬럼명 DESC, 컬럼명 ASC, ...

예시)
SELECT * FROM `member_info`
ORDER BY `gender` ASC, `name` ASC


>>>>>>>> 테이블 데이터 모두 지우기 (초기화) <<<<<<<<<

TRUNCATE TABLE 테이블명;

- 특징: 기존 DELETE문으로 지울경우 모두 지워도 처음 입력되는 데이터가
자동증가 컬럼이 마지막 입력다음번호부터 입력된다!
TRUNCATE TABLE 로 지울 경우 자동증가 컬럼도 초기화 되어
다시 새로입력하면 1번부터 입력된다!

예시)
TRUNCATE TABLE `drama_info`;














